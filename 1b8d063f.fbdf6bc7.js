(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,u=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?r.a.createElement(u,o(o({ref:t},s),{},{components:n})):r.a.createElement(u,o({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},68:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(110)),l={id:"shell",title:"Interactive Shell"},o={unversionedId:"shell",id:"shell",isDocsHomePage:!1,title:"Interactive Shell",description:"Joern provides an interactive shell for code analysis, much like an",source:"@site/docs/shell.mdx",slug:"/shell",permalink:"/shell",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/shell.mdx",version:"current",sidebar:"docs",previous:{title:"Quickstart",permalink:"/quickstart"},next:{title:"Interpreter",permalink:"/interpreter"}},c=[{value:"Launching the Interactive Shell",id:"launching-the-interactive-shell",children:[]},{value:"Basic Keyboard Commands",id:"basic-keyboard-commands",children:[]},{value:"Exporting Results with Pipe Operators and <code>toJson</code>",id:"exporting-results-with-pipe-operators-and-tojson",children:[]},{value:"Inline Code Browsing",id:"inline-code-browsing",children:[{value:"Dynamically Importing Additional Scripts",id:"dynamically-importing-additional-scripts",children:[]},{value:"Adding Dependencies to the JVM <code>classpath</code> Dynamically",id:"adding-dependencies-to-the-jvm-classpath-dynamically",children:[]},{value:"Measuring the Time While Running a Computation",id:"measuring-the-time-while-running-a-computation",children:[]}]}],s={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Joern provides an interactive shell for code analysis, much like an\noperating system shell. We base this shell on the popular Scala shell\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://ammonite.io/#Features"}),"Ammonite"),". In summary, the shell offers\nthe following major features:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Tab-completion"),Object(i.b)("li",{parentName:"ul"},"GNU readline support for line editing"),Object(i.b)("li",{parentName:"ul"},"JSON output"),Object(i.b)("li",{parentName:"ul"},"Pipe operators"),Object(i.b)("li",{parentName:"ul"},"Inline code browsing with a pager"),Object(i.b)("li",{parentName:"ul"},"Dynamic library import")),Object(i.b)("h2",{id:"launching-the-interactive-shell"},"Launching the Interactive Shell"),Object(i.b)("p",null,"The shell can be started by issuing the following command:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$ joern\n")),Object(i.b)("h2",{id:"basic-keyboard-commands"},"Basic Keyboard Commands"),Object(i.b)("p",null,"The Joern underlying shell is essentially an interactive Scala shell that supports the following keyboard commands:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Command")),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CTRL-c"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Cancels current operation/clears shell. Does ",Object(i.b)("em",{parentName:"td"},"not")," quit Joern")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CTRL-d"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Quits Joern (shell must be clear)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"TAB"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Autocomplete")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"UP"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Moves through command history")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CTRL-LEFT/RIGHT"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Step through commands word-by-word (instead of character-by-character)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CTRL-r"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Searches command history. Use CTRL-r (or UP/DOWN) to cycle through your matches")))),Object(i.b)("h2",{id:"exporting-results-with-pipe-operators-and-tojson"},"Exporting Results with Pipe Operators and ",Object(i.b)("inlineCode",{parentName:"h2"},"toJson")),Object(i.b)("p",null,"The execution directive (see ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/traversal-basics"}),"Traversal\nBasics"),") ",Object(i.b)("inlineCode",{parentName:"p"},"toJson")," can be used at the end of\nqueries in order to convert results into the JSON format. This feature can\nbe combined with the shell's pipe operators to write results out to\nthe file system. For example,"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'cpg.method.toJson |> "/tmp/foo.json"\n')),Object(i.b)("p",null,"writes all methods nodes into the file ",Object(i.b)("inlineCode",{parentName:"p"},"/tmp/foo.json"),"."),Object(i.b)("h2",{id:"inline-code-browsing"},"Inline Code Browsing"),Object(i.b)("p",null,"For an increasing number of languages, the Joern shell allows you to\nread code associated with query results directly on the shell. For\nexample, to review all calls to ",Object(i.b)("inlineCode",{parentName:"p"},"memcpy"),", you can issue:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.method.name("memcpy").callIn.code.l\n\nres5: List[String] = List(\n  "memcpy(buf, first, first_len)",\n  "memcpy(buf + first_len, second, second_len)",\n  "memcpy(buf, first, first_len)",\n  "memcpy(buf + first_len, second, second_len)",\n  "memcpy(buf + first_len, second, second_len)",\n  "memcpy(buf, first, first_len)"\n)\n')),Object(i.b)("p",null,"You can also pipe the result list into a pager as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'joern> browse(cpg.method.name("memcpy").callIn.code.l)\n')),Object(i.b)("p",null,"To study the context in which a result occurs, you can use the .dump\nmethod, which will dump the enclosing function\u2019s code for each\nfinding, and point you to the finding via an arrow:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),'joern> cpg.method.name("memcpy").callIn.dump\n\nint main() {\n  unsigned int first_len = UINT_MAX - 256;\n  unsigned int second_len = 256;\n  unsigned int buf_len = 256;\n\n  char first[first_len], second[second_len], buf[buf_len];\n  int new_len = (first_len+second_len); // <- IDB (negative)\n\n  if(new_len <= 256) {\n    memcpy(buf, first, first_len);\n        memcpy(buf + first_len, second, second_len); /* <=== */\n  }\n}\n\n...\n')),Object(i.b)("p",null,"You can use this feature together with browse to read code in the\npager. Finally, if you want to read the code in your editor of choice,\njust dump it to a file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'cpg.method.name("memcpy").callIn.dumpRaw |> "/tmp/foo.c"\n')),Object(i.b)("p",null,"We use ",Object(i.b)("inlineCode",{parentName:"p"},"dumpRaw")," here to skip syntax highlighting, as your editor will\nmost likely do that for you."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Please make sure\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.gnu.org/software/src-highlite/"}),"source-highlight")," is\ninstalled for the ",Object(i.b)("inlineCode",{parentName:"p"},".dump")," feature to work."))),Object(i.b)("h3",{id:"dynamically-importing-additional-scripts"},"Dynamically Importing Additional Scripts"),Object(i.b)("p",null,"You can dynamically load additional scripts at any time."),Object(i.b)("p",null,"As an example, let's assume there's a file called ",Object(i.b)("inlineCode",{parentName:"p"},"MyScript.sc")," that contains only ",Object(i.b)("inlineCode",{parentName:"p"},"val elite = 31337"),". You can import the script as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"import $file.MyScript\nMyScript.elite\nres1: Int = 31337\n")),Object(i.b)("p",null,"If the file is in a subfolder (e.g. ",Object(i.b)("strong",{parentName:"p"},"scripts"),"), use dot syntax: ",Object(i.b)("inlineCode",{parentName:"p"},"import $file.scripts.MyScript"),"."),Object(i.b)("p",null,"To go up one directory, use ",Object(i.b)("inlineCode",{parentName:"p"},"^"),"."),Object(i.b)("h3",{id:"adding-dependencies-to-the-jvm-classpath-dynamically"},"Adding Dependencies to the JVM ",Object(i.b)("inlineCode",{parentName:"h3"},"classpath")," Dynamically"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// java dependency\nimport $ivy.`com.michaelpollmeier:versionsort:1.0.1`\nversionsort.VersionHelper.compare("2.1.0", "2.0.10")\n// res: Int = 1\n\n// scala dependency\nimport $ivy.`com.michaelpollmeier::colordiff:0.9`\ncolordiff.ColorDiff(List("a", "b"), List("a", "bb"))\n// color coded diff\n')),Object(i.b)("p",null,"If the dependencies are not on Maven Central, you can add a resolver:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'interp.repositories() ++= Seq(coursierapi.MavenRepository.of("https://shiftleft.jfrog.io/shiftleft/libs-snapshot-local"))\n')),Object(i.b)("h3",{id:"measuring-the-time-while-running-a-computation"},"Measuring the Time While Running a Computation"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'time { \n  println("long running computation")\n  Thread.sleep(1000)\n  42\n}\n// res: (42, 1000332390 nanoseconds)\n')))}b.isMDXComponent=!0}}]);
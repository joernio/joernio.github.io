(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{103:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),l=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=l(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},b=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(a),b=r,m=d["".concat(i,".").concat(b)]||d[b]||h[b]||o;return a?n.a.createElement(m,s(s({ref:t},c),{},{components:a})):n.a.createElement(m,s({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=b;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return l}));var r=a(3),n=a(7),o=(a(0),a(103)),i={id:"code-property-graph",title:"Code Property Graph",joern_shared:!0},s={unversionedId:"code-property-graph",id:"code-property-graph",isDocsHomePage:!1,title:"Code Property Graph",description:"The Code Property Graph is a data structure designed to mine large",source:"@site/docs/code-property-graph.mdx",slug:"/code-property-graph",permalink:"/code-property-graph",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/code-property-graph.mdx",version:"current",sidebar:"docs",previous:{title:"Workspace",permalink:"/organizing-projects"},next:{title:"Traversal Basics",permalink:"/traversal-basics"}},p=[{value:"Building Blocks of Code Property Graphs",id:"building-blocks-of-code-property-graphs",children:[]}],c={toc:p};function l(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The Code Property Graph is a data structure designed to mine large\ncodebases for instances of programming patterns. These patterns are\nformulated in a domain-specific language (DSL) based on\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.scala-lang.org/"}),"Scala"),". It serves as a single\nintermediate program representation across all languages supported by\nJoern and its commercial brother ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.shifleft.io/"}),"Ocular"),"."),Object(o.b)("p",null,"Property graphs are a generic abstraction supported by many\ncontemporary graph databases such as ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://neo4j.com/"}),"Neo4j"),",\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://orientdb.com/"}),"OrientDB"),", and\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://janusgraph.org/"}),"JanusGraph"),". In fact, ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/fabsx00/joern-old"}),"older versions of\nJoern")," made use of general\npurpose graph databases as a storage backend and the graph query\nlanguage ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://tinkerpop.apache.org/gremlin.html"}),"Gremlin"),". As the\nlimitations of this approach became more apparent over the years, we\nreplaced both the storage backend and query language with our own\ngraph database\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/ShiftLeftSecurity/overflowdb"}),"OverflowDB"),"."),Object(o.b)("p",null,"ShiftLeft has open-sourced the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/ShiftLeftSecurity/codepropertygraph"}),"implementation of the code property\ngraph")," and its\nspecification."),Object(o.b)("h2",{id:"building-blocks-of-code-property-graphs"},"Building Blocks of Code Property Graphs"),Object(o.b)("p",null,"Code Property Graphs are ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)"}),"graphs as studied in discrete\nmathematics"),",\nand more specifically ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://arxiv.org/pdf/1004.1001.pdf"}),"property\ngraphs"),". A property graph is\ncomposed of the following building blocks:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Nodes and their types.")," Nodes represent program\nconstructs. This includes low-level language constructs such as\nmethods, variables, and control structures, but also higher level\nconstructs such as HTTP endpoints or findings. Each node has a\ntype. The type indicates the type of program construct represented\nby the node, e.g., a node with the type ",Object(o.b)("inlineCode",{parentName:"p"},"METHOD")," represents a method\nwhile a node with type ",Object(o.b)("inlineCode",{parentName:"p"},"LOCAL")," represents the declaration of a local\nvariable.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Labeled directed edges."),"\nRelations between program constructs are represented via edges\nbetween their corresponding nodes. For example, to express that a\nmethod contains a local variable, we can create an edge with the\nlabel ",Object(o.b)("inlineCode",{parentName:"p"},"CONTAINS")," from the method's node to the local's node. By\nusing labeled edges, we can represent multiple types of relations in\nthe same graph. Moreover, edges are directed to express, e.g., that\nthe method contains the local but not the other way around. Multiple\nedges may exist between the same two nodes.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Key-Value Pairs."),"\nNodes carry key-value pairs (attributes), where the valid\nkeys depend on the node type. For example, a method has at\nleast a name and a signature while a local declaration has at\nleast the name and the type of the declared variable."))),Object(o.b)("p",null,"In summary, Code Property Graphs are directed, edge-labeled,\nattributed multigraphs, and we insist that each node carries at least\none attribute that indicates its type."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"A Look into the Rear-View Mirror"),Object(o.b)("p",{parentName:"div"},"The Code Property Graph was first introduced in the paper ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://fabs.codeminers.org/papers/2014-ieeesp.pdf"}),"Modeling\nand Discovering Vulnerabilities with Code Property\nGraphs")," in the\ncontext of vulnerability discovery for C system code and the Linux\nkernel in particular. The core ideas outlined in this early work are\nthe following:"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Different classic program representations are merged into a property\ngraph into a single data structure that holds information about the\nprogram\u2019s syntax, control- and intra-procedural data-flow.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The property graph is stored in a graph database and made accessible\nvia a domain specific language (DSL) for the identification of\nprogramming patterns - based on a DSL for graph traversals.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The query language allows to seamlessly transition between the\noriginal code representations, making it possible to combine aspects\nof the code from different views these representations offer in a\nsingle query."))),Object(o.b)("p",{parentName:"div"},"From 2014-2016, research followed on (a) extending the concept for\ninterprocedural analysis, (b) using the graph as a basis for learning\ntypical data-flow patterns in a program, (c) the effects of\nintroducing further classic program representations such as dominator\ntrees, (d) and the applicability of the approach for dynamically-typed\nlanguages such as PHP."),Object(o.b)("p",{parentName:"div"},"From 2017 onwards, the code property graph served as the technological\nfoundation for the static analysis solutions developed at ShiftLeft\nInc. The representation has since undergone heavy extensions and\ntransformations. At the statement and expression level, it has matured\ninto a generic container format which allows for hosting of graphs\ngenerated by 8 different language frontends, to enable querying with\nthe same query language across programming languages. Moreover, the\nconcept of overlays was introduced to allow representing code\non different levels of abstraction, enabling transitioning\nbetween these layers of abstraction using the query language in the\nsame way as for the original three low-level code\nrepresentations. Finally, programming models and APIs are now\navailable for parallel graph processing at low memory footprint - a\ncore ingredient for scaling the approach."))))}l.isMDXComponent=!0}}]);
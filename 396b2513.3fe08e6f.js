(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{109:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var l=t(0),o=t.n(l);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,l,o=function(e,n){if(null==e)return{};var t,l,o={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},b=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(t),u=l,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||a;return t?o.a.createElement(d,r(r({ref:n},s),{},{components:t})):o.a.createElement(d,r({ref:n},s))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=u;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var l=t(3),o=t(7),a=(t(0),t(109)),i={id:"hello-llvm",title:"Hello, LLVM World"},r={unversionedId:"llvm2cpg/hello-llvm",id:"llvm2cpg/hello-llvm",isDocsHomePage:!1,title:"Hello, LLVM World",description:"Besides working with the source code written in C and C++, Joern supports CPGs",source:"@site/docs/llvm2cpg/hello-llvm-world.md",slug:"/llvm2cpg/hello-llvm",permalink:"/llvm2cpg/hello-llvm",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/llvm2cpg/hello-llvm-world.md",version:"current",sidebar:"docs",previous:{title:"Glossary",permalink:"/glossary"},next:{title:"Getting LLVM Bitcode",permalink:"/llvm2cpg/getting-bitcode"}},c=[{value:"Emit LLVM Bitcode",id:"emit-llvm-bitcode",children:[]},{value:"Emit CPG",id:"emit-cpg",children:[]},{value:"Analyze CPG with Joern",id:"analyze-cpg-with-joern",children:[]},{value:"Slightly more complex analysis",id:"slightly-more-complex-analysis",children:[]}],s={toc:c};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(l.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Besides working with the source code written in C and C++, Joern supports CPGs\ngenerated from the ",Object(a.b)("a",Object(l.a)({parentName:"p"},{href:"https://llvm.org/docs/BitCodeFormat.html"}),"LLVM Bitcode"),"."),Object(a.b)("p",null,"This article shows a basic example of how to use ",Object(a.b)("a",Object(l.a)({parentName:"p"},{href:"http://github.com/ShiftLeftSecurity/llvm2cpg"}),"llvm2cpg")," with Joern."),Object(a.b)("p",null,"The basic workflow is the following:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Convert a program into LLVM Bitcode"),Object(a.b)("li",{parentName:"ol"},"Generate a CPG using llvm2cpg"),Object(a.b)("li",{parentName:"ol"},"Import the CPG into Joern and start the analysis")),Object(a.b)("h2",{id:"emit-llvm-bitcode"},"Emit LLVM Bitcode"),Object(a.b)("p",null,"Let's start with a simple C program:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-c"}),"// foo.c\nint source(void);\nvoid sink(int);\nvoid foo() {\n  int x = source();\n  sink(x);\n}\n")),Object(a.b)("p",null,"You can use the following command to convert ",Object(a.b)("inlineCode",{parentName:"p"},"foo.c")," to the bticode format:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-shell"}),"$ clang -emit-llvm -S -g -O1 -o foo.ll foo.c \n")),Object(a.b)("p",null,"Here is a brief explanation of what each flag does:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-emit-llvm")," tells clang to emit LLVM Bitcode instead of an object file or an executable"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-S")," forces clang to emit the bitcode in a human-readable, textual format"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-g")," enables debug info. Strictly speaking, this one is not needed, but it's essential if we want to map bitcode instructions back to the original source code"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-O1")," by default, clang emits a very inefficient bitcode with a lot of redundancy. This flag tells clang to apply some optimizations to make the bitcode a bit more concise"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-o foo.ll")," tells clang to store the result in the file ",Object(a.b)("inlineCode",{parentName:"li"},"foo.ll"))),Object(a.b)("p",null,"Upon success, ",Object(a.b)("inlineCode",{parentName:"p"},"foo.ll")," should contain the following:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-bash"}),'$ cat foo.ll\n; ModuleID = \'foo.c\'\nsource_filename = "foo.c"\ntarget datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"\ntarget triple = "x86_64-apple-macosx10.16.0"\n\n; Function Attrs: noinline nounwind optnone ssp uwtable\ndefine void @foo() #0 !dbg !8 {\n  %1 = alloca i32, align 4\n  call void @llvm.dbg.declare(metadata i32* %1, metadata !11, metadata !DIExpression()), !dbg !13\n  %2 = call i32 @source(), !dbg !14\n  store i32 %2, i32* %1, align 4, !dbg !13\n  %3 = load i32, i32* %1, align 4, !dbg !15\n  call void @sink(i32 %3), !dbg !16\n  ret void, !dbg !17\n}\n\n; Function Attrs: nounwind readnone speculatable\ndeclare void @llvm.dbg.declare(metadata, metadata, metadata) #1\n\ndeclare i32 @source() #2\n\ndeclare void @sink(i32) #2\n\n<more lines truncated>\n')),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Note:")," it's very likely that you have different ",Object(a.b)("inlineCode",{parentName:"p"},"target datalayout")," and ",Object(a.b)("inlineCode",{parentName:"p"},"target triple")," depending on the machine/OS you're running."),Object(a.b)("h2",{id:"emit-cpg"},"Emit CPG"),Object(a.b)("p",null,"To convert LLVM Bitcode into CPG you need to get ",Object(a.b)("a",Object(l.a)({parentName:"p"},{href:"https://github.com/ShiftLeftSecurity/llvm2cpg/releases/latest"}),"llvm2cpg")," and run the following command:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-bash"}),"$ llvm2cpg --output=/tmp/foo.cpg.bin.zip foo.ll\n[llvm2cpg] [info] More details: /tmp/llvm2cpg-6595f1.log\n[llvm2cpg] [info] Loading foo.ll\n[llvm2cpg] [info] Start type deduplication\n[llvm2cpg] [info] Finish type deduplication\n[llvm2cpg] [info] Emitting CPG 1/1\n[llvm2cpg] [info] Serializing CPG\n[llvm2cpg] [info] Saving CPG on disk\n[llvm2cpg] [info] CPG is successfully saved on disk: /tmp/foo.cpg.bin.zip\n[llvm2cpg] [info] Shutting down\n")),Object(a.b)("p",null,"Once done, the CPG (",Object(a.b)("inlineCode",{parentName:"p"},"/tmp/foo.cpg.bin.zip"),") can be fed to Joern."),Object(a.b)("h2",{id:"analyze-cpg-with-joern"},"Analyze CPG with Joern"),Object(a.b)("p",null,"Let's find the simple flow in the above program:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-bash"}),'$ joern\njoern> importCpg("/tmp/foo.cpg.bin.zip")\njoern> run.ossdataflow\njoern> def source = cpg.call("source")\njoern> def sink = cpg.call("sink").argument\njoern> sink.reachableByFlows(source).p\nres26: List[String] = List(\n  """____________________________________________________\n| tracked               | lineNumber| method| file  |\n|===================================================|\n| source                | 5         | foo   | foo.c |\n| <operator>.assignment | 5         | foo   | foo.c |\n| sink                  | 6         | foo   | foo.c |\n"""\n)\n')),Object(a.b)("p",null,"Joern tells us that the result of the call to ",Object(a.b)("inlineCode",{parentName:"p"},"source")," (line 5) is passed to the function ",Object(a.b)("inlineCode",{parentName:"p"},"sink")," as an argument (line 6).\nLooking at the original code it seems legit:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-c"}),"// foo.c\nint source(void);\nvoid sink(int);\nvoid foo() {\n  int x = source();\n  sink(x);\n}\n")),Object(a.b)("h2",{id:"slightly-more-complex-analysis"},"Slightly more complex analysis"),Object(a.b)("p",null,"The previous example may seem too boring, so let's at something a bit more interesting now.\nConsider the following program with a double free bug:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-c"}),"// main.c\n#include <stdlib.h>\n\nextern void use_buffer(void *b);\n\nint main(int argc, char **argv) {\n  void *buf = malloc(42);\n  if (argc & 1) {\n    use_buffer(buf);\n    free(buf);\n  }\n  free(buf);\n  return 0;\n}\n")),Object(a.b)("p",null,"Following the same steps, we get a CPG:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-bash"}),"$ clang -emit-llvm -S -g -O1 -o main.ll main.c\n$ llvm2cpg --output=/tmp/main.cpg.bin.zip main.ll\n")),Object(a.b)("p",null,"And start the analysis. Here we are interested to see if any value passed as an argument to the ",Object(a.b)("inlineCode",{parentName:"p"},"free")," function is passed as an argument to the function ",Object(a.b)("inlineCode",{parentName:"p"},"free"),".\nBy default, we get three flows as follows:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-bash"}),'$ joern\njoern> workspace.reset\njoern> importCpg("/tmp/main.cpg.bin.zip")\njoern> run.ossdataflow\njoern> def source = cpg.call("free").argument\njoern> def sink = cpg.call("free").argument\njoern> sink.reachableByFlows(source).p\nres54: List[String] = List(\n  """______________________________________\n| tracked| lineNumber| method| file   |\n|=====================================|\n| free   | 12        | main  | main.c |\n""",\n  """______________________________________\n| tracked| lineNumber| method| file   |\n|=====================================|\n| free   | 10        | main  | main.c |\n""",\n  """______________________________________\n| tracked| lineNumber| method| file   |\n|=====================================|\n| free   | 10        | main  | main.c |\n| free   | 12        | main  | main.c |\n"""\n)\n')),Object(a.b)("p",null,"The first two are 'loops': there is a flow from the ",Object(a.b)("inlineCode",{parentName:"p"},"free")," to itself.\nWe can filter these results out by only asking for flows that are longer than one:"),Object(a.b)("pre",null,Object(a.b)("code",Object(l.a)({parentName:"pre"},{className:"language-bash"}),'joern> sink.reachableByFlows(source).filter(f => f.elements.size > 1).p\nres55: List[String] = List(\n  """______________________________________\n| tracked| lineNumber| method| file   |\n|=====================================|\n| free   | 10        | main  | main.c |\n| free   | 12        | main  | main.c |\n"""\n)\n')),Object(a.b)("p",null,"Which yields the double-free bug in the program!"))}p.isMDXComponent=!0}}]);
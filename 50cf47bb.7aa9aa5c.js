(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return g}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?r.a.createElement(g,c(c({ref:t},l),{},{components:n})):r.a.createElement(g,c({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(103)),o={id:"augmentation-directives",title:"Augmentation Directives"},c={unversionedId:"cpgql/augmentation-directives",id:"cpgql/augmentation-directives",isDocsHomePage:!1,title:"Augmentation Directives",description:"Augmentation Directives are CPGQL Directives which extend a Code Property Graph with nodes, properties and edges.",source:"@site/docs/cpgql/augmentation-directives.mdx",slug:"/cpgql/augmentation-directives",permalink:"/cpgql/augmentation-directives",editUrl:"https://github.com/joernio/website/docs.joern.io/edit/master/website/docs/cpgql/augmentation-directives.mdx",version:"current",sidebar:"docs",previous:{title:"Execution Directives",permalink:"/cpgql/execution-directives"},next:{title:"Help Directive",permalink:"/cpgql/help-directive"}},s=[{value:"newTagNode",id:"newtagnode",children:[]},{value:"newTagNodePair",id:"newtagnodepair",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Augmentation Directives are CPGQL Directives which extend a Code Property Graph with nodes, properties and edges."),Object(i.b)("p",null,"Take the following simple program named ",Object(i.b)("inlineCode",{parentName:"p"},"X42"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  if (argc > 1 && strcmp(argv[1], "42") == 0) {\n    fprintf(stderr, "It depends!\\n");\n    exit(42);\n  }\n  printf("What is the meaning of life?\\n");\n  exit(0);\n}\n')),Object(i.b)("h3",{id:"newtagnode"},"newTagNode"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"newTagNode")," is an ",Object(i.b)("em",{parentName:"p"},"Augmentation Directive")," that adds tags with user-defined keys to the nodes that are part of the traversal they're suffixing. It works together with the ",Object(i.b)("inlineCode",{parentName:"p"},"store")," CPGQL Component which creates the actual nodes representing the tags, and the ",Object(i.b)("inlineCode",{parentName:"p"},"run.commit")," which merges those nodes in the active ",Object(i.b)("em",{parentName:"p"},"Code Property Graph"),"."),Object(i.b)("p",null,"Say for example that you'd like to add tags to all the nodes of ",Object(i.b)("inlineCode",{parentName:"p"},"X42"),"'s Code Property Graph that represent calls to ",Object(i.b)("inlineCode",{parentName:"p"},"exit"),". That is, these two:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// list all CALL nodes in the X42 program with the string "exit" in their CALL property\njoern> cpg.call.name("exit").code.l \nres0: List[String] = List("exit(0)", "exit(42)")\n')),Object(i.b)("p",null,"And say that you'd like to use the key ",Object(i.b)("inlineCode",{parentName:"p"},"MY_KIND_OF_EXIT")," for the tags you want to create:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'// create tags with the key MY_KIND_OF_EXIT for all CALL nodes which have the string "exit" in the value of their NAME property\njoern> cpg.call.name("exit").newTagNode("MY_KIND_OF_EXIT").store \n\n// apply the diffgraph to the currently active Code Property Graph\njoern> run.commit \n2020-07-02 14:07:02.041 [main] INFO Enhancement io.shiftleft.console.Commit$$anon$1 completed in 0 milliseconds\nThe graph has been modified. You may want to use the `save` command to persist changes to disk.  All changes will also be saved collectively on exit\nres1: Cpg = io.shiftleft.codepropertygraph.Cpg@97c920b\n\n// list the newly created tags\njoern> cpg.tag.name("MY_KIND_OF_EXIT").l \nres2: List[nodes.Tag] = List(\n  Tag(id -> 42L, name -> "MY_KIND_OF_EXIT", value -> ""),\n  Tag(id -> 41L, name -> "MY_KIND_OF_EXIT", value -> "")\n)\n\n// list the CODE property of all CALL nodes attached to the newly created tags\njoern> cpg.tag.name("MY_KIND_OF_EXIT").call.code.l \nres3: List[String] = List("exit(42)", "exit(0)")\n')),Object(i.b)("h3",{id:"newtagnodepair"},"newTagNodePair"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"newTagNodePair")," is very similar to ",Object(i.b)("inlineCode",{parentName:"p"},"newTagNode"),": it is an ",Object(i.b)("em",{parentName:"p"},"Augmentation Directive")," that adds tags with user-defined keys and user-defined values to the nodes that are part of the traversal they're suffixing. It also works together with ",Object(i.b)("inlineCode",{parentName:"p"},"store")," and ",Object(i.b)("inlineCode",{parentName:"p"},"run.commit"),", but you can specify both a key and a value for the nodes created:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.name("exit").newTagNodePai("MY_OTHER_KIND_OF_EXIT", "MY_VALUE").store \n\njoern> run.commit \n2020-07-02 14:07:02.041 [main] INFO Enhancement io.shiftleft.console.Commit$$anon$1 completed in 0 milliseconds\nThe graph has been modified. You may want to use the `save` command to persist changes to disk.  All changes will also be saved collectively on exit\nres1: Cpg = io.shiftleft.codepropertygraph.Cpg@97c920b\n\njoern> cpg.tag.name("MY_OTHER_KIND_OF_EXIT").l \nres2: List[nodes.Tag] = List(\n  Tag(id -> 44L, name -> "MY_OTHER_KIND_OF_EXIT", value -> "MY_VALUE"),\n  Tag(id -> 43L, name -> "MY_OTHER_KIND_OF_EXIT", value -> "MY_VALUE")\n)\n\njoern> cpg.tag.value("MY_VALUE").call.code.l \nres3: List[String] = List("exit(42)", "exit(0)")\n')))}p.isMDXComponent=!0}}]);
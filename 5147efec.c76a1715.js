(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{158:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return o})),r.d(t,"default",(function(){return p}));var n=r(1),a=r(10),i=(r(0),r(179)),s={id:"execution-directives",title:"Execution Directives"},c={id:"cpgql/execution-directives",title:"Execution Directives",description:"Execution Directives are CPGQL Directives which execute the traversals they suffix and return the result in a specific format. The most straightforward Execution Directive is toList which, as the name suggests, executes the CPGQL Query it suffixes and returns the results in a list:",source:"@site/docs/cpgql/execution-directives.mdx",permalink:"/cpgql/execution-directives",sidebar:"docs",previous:{title:"Complex Steps",permalink:"/cpgql/complex-steps"},next:{title:"Augmentation Directives",permalink:"/cpgql/augmentation-directives"}},o=[{value:"toList",id:"tolist",children:[]},{value:"l",id:"l",children:[]},{value:"head",id:"head",children:[]},{value:"size",id:"size",children:[]},{value:"Execution Directives and the Joern Interpreter",id:"execution-directives-and-the-joern-interpreter",children:[]},{value:"p",id:"p",children:[]},{value:"toJson",id:"tojson",children:[]},{value:"toJsonPretty",id:"tojsonpretty",children:[]},{value:"size",id:"size-1",children:[]}],l={rightToc:o};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Execution Directives are CPGQL Directives which execute the traversals they suffix and return the result in a specific format. The most straightforward ",Object(i.b)("em",{parentName:"p"},"Execution Directive")," is ",Object(i.b)("inlineCode",{parentName:"p"},"toList")," which, as the name suggests, executes the CPGQL Query it suffixes and returns the results in a list:"),Object(i.b)("h3",{id:"tolist"},"toList"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.name.toList \nres0: List[String] = List(\n  "exit",\n  "printf",\n  "exit",\n  "fprintf",\n  "<operator>.indirectIndexAccess",\n  "strcmp",\n  "<operator>.equals",\n  "<operator>.greaterThan",\n  "<operator>.logicalAnd"\n)\n')),Object(i.b)("h3",{id:"l"},"l"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"toList")," has a shorthand named ",Object(i.b)("inlineCode",{parentName:"p"},"l"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.name.l \nres0: List[String] = List(\n  "exit",\n  "printf",\n  "exit",\n  "fprintf",\n  "<operator>.indirectIndexAccess",\n  "strcmp",\n  "<operator>.equals",\n  "<operator>.greaterThan",\n  "<operator>.logicalAnd"\n)\n')),Object(i.b)("h3",{id:"head"},"head"),Object(i.b)("p",null,"Executes the traversal and returns the first result"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.name.head\nres0: List[String] = List(\n  "exit",\n)\n')),Object(i.b)("h3",{id:"size"},"size"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"size")," executes the traversal and returns the size of the result set"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"joern> cpg.call.size\nres0: Int = 9\n")),Object(i.b)("h3",{id:"execution-directives-and-the-joern-interpreter"},"Execution Directives and the Joern Interpreter"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Execution Directives")," sit at the border between CPQGL Queries and the Joern Interpreter, that is at the border between querying Code Property Graphs, and using the results of those queries for further processing using the Scala programming language. For example, say you'd like to take the results of a query execution and write them to a text file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'// first import the namespace for Java I/O\njoern> import java.io._ \nimport java.io._\n\n// afterwards open a file stream to a new file named `my-query-result.txt`\njoern> val pw = new PrintWriter(new File("./my-query-result.txt" )) \npw: PrintWriter = java.io.PrintWriter@fe4c8fc\n\n// execute your query and store the results in a constant\njoern> val myQueryResult = cpg.call.size \nmyQueryResult: Int = 9\n\n// cast myQueryResult to a string, and write it to the file stream\njoern> pw.write(myQueryResult.toString()) \n\n// close the file streasm\njoern> pw.close() \n\n')),Object(i.b)("p",null,"You'll see your results written to a file, ready for post-analysis:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ cat my-query-result.txt \n9\n")),Object(i.b)("p",null,"Writing the results of a query to a file can also be done in a more concise way using the ",Object(i.b)("inlineCode",{parentName:"p"},"|>")," operator provided by the Joern Interpreter:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.size.toString() |> "my-query-result.txt"\n')),Object(i.b)("h3",{id:"p"},"p"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"p")," executes the traversal and pretty-prints the results:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.p \nres26: List[String] = List(\n  "(CALL,31): ARGUMENT_INDEX: 3, CODE: exit(0), COLUMN_NUMBER: 2, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 11, METHOD_FULL_NAME: exit, NAME: exit, ORDER: 3, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,29): ARGUMENT_INDEX: 2, CODE: printf(\\"What is the meaning of life?\\\\n\\"), COLUMN_NUMBER: 2, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 10, METHOD_FULL_NAME: printf, NAME: printf, ORDER: 2, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,27): ARGUMENT_INDEX: 2, CODE: exit(42), COLUMN_NUMBER: 4, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 8, METHOD_FULL_NAME: exit, NAME: exit, ORDER: 2, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,24): ARGUMENT_INDEX: 1, CODE: fprintf(stderr, \\"It depends!\\\\n\\"), COLUMN_NUMBER: 4, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 7, METHOD_FULL_NAME: fprintf, NAME: fprintf, ORDER: 1, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,18): ARGUMENT_INDEX: 1, CODE: argv[1], COLUMN_NUMBER: 25, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 6, METHOD_FULL_NAME: <operator>.indirectIndexAccess, NAME: <operator>.indirectIndexAccess, ORDER: 1, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,17): ARGUMENT_INDEX: 1, CODE: strcmp(argv[1], \\"42\\"), COLUMN_NUMBER: 18, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 6, METHOD_FULL_NAME: strcmp, NAME: strcmp, ORDER: 1, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,16): ARGUMENT_INDEX: 2, CODE: strcmp(argv[1], \\"42\\") == 0, COLUMN_NUMBER: 18, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 6, METHOD_FULL_NAME: <operator>.equals, NAME: <operator>.equals, ORDER: 2, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,13): ARGUMENT_INDEX: 1, CODE: argc > 1, COLUMN_NUMBER: 6, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 6, METHOD_FULL_NAME: <operator>.greaterThan, NAME: <operator>.greaterThan, ORDER: 1, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY",\n  "(CALL,12): ARGUMENT_INDEX: 1, CODE: argc > 1 && strcmp(argv[1], \\"42\\") == 0, COLUMN_NUMBER: 6, DISPATCH_TYPE: STATIC_DISPATCH, LINE_NUMBER: 6, METHOD_FULL_NAME: <operator>.logicalAnd, NAME: <operator>.logicalAnd, ORDER: 1, SIGNATURE: TODO assignment signature, TYPE_FULL_NAME: ANY"\n)\n')),Object(i.b)("h3",{id:"tojson"},"toJson"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"toJson")," executes the traversal and returns the results in a JSON string:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.name.toJson \nres28: String = "[\\"exit\\",\\"printf\\",\\"exit\\",\\"fprintf\\",\\"<operator>.indirectIndexAccess\\",\\"strcmp\\",\\"<operator>.equals\\",\\"<operator>.greaterThan\\",\\"<operator>.logicalAnd\\"]"\n')),Object(i.b)("h3",{id:"tojsonpretty"},"toJsonPretty"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"toJsonPretty")," executes the traversal and returns the results in a pretty-printed JSON string:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.name.toJsonPretty \nres29: String = """[\n  "exit",\n  "printf",\n  "exit",\n  "fprintf",\n  "<operator>.indirectIndexAccess",\n  "strcmp",\n  "<operator>.equals",\n  "<operator>.greaterThan",\n  "<operator>.logicalAnd"\n]"""\n')),Object(i.b)("h3",{id:"size-1"},"size"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"size")," executes the traversal and returns the number of results:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"joern> cpg.call.size \nres0: Int = 9\n")))}p.isMDXComponent=!0},179:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c({},t,{},e)),r},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},O=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(r),O=n,d=u["".concat(s,".").concat(O)]||u[O]||b[O]||i;return r?a.a.createElement(d,c({ref:t},l,{components:r})):a.a.createElement(d,c({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=O;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,r)}O.displayName="MDXCreateElement"}}]);
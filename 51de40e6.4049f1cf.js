(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{107:function(e,t,a){"use strict";a.d(t,"a",(function(){return O})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},O=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},o=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),O=p(a),o=n,m=O["".concat(l,".").concat(o)]||O[o]||j[o]||b;return a?r.a.createElement(m,c(c({ref:t},d),{},{components:a})):r.a.createElement(m,c({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=o;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var d=2;d<b;d++)l[d]=a[d];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"},83:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),b=(a(0),a(107)),l={id:"reference-card",title:"Reference Card"},c={unversionedId:"cpgql/reference-card",id:"cpgql/reference-card",isDocsHomePage:!1,title:"Reference Card",description:"Node-Type Steps",source:"@site/docs/cpgql/reference-card.mdx",slug:"/cpgql/reference-card",permalink:"/cpgql/reference-card",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/cpgql/reference-card.mdx",version:"current",sidebar:"docs",previous:{title:"Getting LLVM Bitcode",permalink:"/llvm2cpg/getting-bitcode"},next:{title:"Node-Type Steps",permalink:"/cpgql/node-type-steps"}},i=[{value:"Node-Type Steps",id:"node-type-steps",children:[]},{value:"Core Steps",id:"core-steps",children:[]},{value:"Filter Steps",id:"filter-steps",children:[]},{value:"Repeat Steps",id:"repeat-steps",children:[]},{value:"Complex Steps",id:"complex-steps",children:[]},{value:"Execution Directives",id:"execution-directives",children:[]},{value:"Help Directive",id:"help-directive",children:[]},{value:"Augmentation Directives",id:"augmentation-directives",children:[]}],d={toc:i};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h3",{id:"node-type-steps"},"Node-Type Steps"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Step"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"all")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All nodes")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"argument")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All arguments (actual parameters)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"call")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All call sites")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"comment")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All comments (only source-based CPGs)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"file")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All source files")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"identifier")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All identifiers, e.g.  occurrences of local variables or class members in method bodies")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"literal")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All literals, e.g. numbers or strings")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"local")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All local variables")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"member")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All members of complex types, e.g. classes, structs")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"metaData")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The meta data node")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"method")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All methods")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"methodRef")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All method references")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"typeRef")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All type references")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"methodReturn")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All formal return paramters")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"namespace")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All namespaces")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"namespaceBlock")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All namespace blocks")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"parameter")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All parameters")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"returns")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All actual return parameters")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"typeDecl")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All declarations of types")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"tag")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All tags")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"types")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All used types")))),Object(b.b)("h3",{id:"core-steps"},"Core Steps"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Step"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"clone")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Create a deep copy of the traversal")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"dedup")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Deduplicate results in a traveral")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"map")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Transform the traversal by a given function")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"sideEffect")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Extend the traversal with a side-effect step by applying a function")))),Object(b.b)("h3",{id:"filter-steps"},"Filter Steps"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Step"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"and")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The ",Object(b.b)("em",{parentName:"td"},"and")," step is a filter with multiple ",Object(b.b)("em",{parentName:"td"},"and")," related filter traversals.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"filter")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Keep nodes for which the provided ",Object(b.b)("inlineCode",{parentName:"td"},"predicate")," returns true")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"filterNot")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Keep nodes for which the provided ",Object(b.b)("inlineCode",{parentName:"td"},"predicate")," returns false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"where")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Traversal proceeds for steps with non-empty returns for the provided ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"whereNot")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Traversal proceeds for steps with empty returns for the provided ",Object(b.b)("inlineCode",{parentName:"td"},"predicate"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"or")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The ",Object(b.b)("em",{parentName:"td"},"or")," step is a filter with multiple ",Object(b.b)("em",{parentName:"td"},"or")," related filter traversals.")))),Object(b.b)("h3",{id:"repeat-steps"},"Repeat Steps"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Step"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"repeat")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Repeat the given traversal. This step can be combined with the until and emit steps to provide a termination and emit criteria.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"until")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Termination criteria for a repeat step. If used before the repeat step it as "while" characteristics. If used after the repeat step it as "do-while" characteristics.')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"times")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Modifier for repeat steps. Configure the amount of times the repeat traversal is executed.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"emit")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Emit is used with the repeat step to emit the elements of the repeatTraversal after each iteration of the repeat loop.")))),Object(b.b)("h3",{id:"complex-steps"},"Complex Steps"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Step"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"callee")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List all nodes representing Call Graph callees of the traversed nodes")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"caller")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List all nodes representing Call Graph callers of the traversed nodes")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"callIn")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List all nodes representing Call Graph parent call-sites of the traversed nodes")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"controlledBy")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns only those dataflows that are wrapped by a given AST control condition (>, <, =, etc.)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"dump")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and return the CODE property with syntax highlighting")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"dumpRaw")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and return the CODE property without syntax highlighting")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"inCall")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Lists all nodes representing surrounding Call Graph call-sites of the traversed nodes")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"locations")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List of all locations nodes traversed in a given dataflow")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"notControlledBy")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns only those flows that are NOT wrapped by a given AST control condition (>, <, =, etc.)")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"passesNot")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns only those dataflows that DO NOT pass through a given function/condition as defined in predicate")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"passes")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns only those dataflows that pass through a given function/condition as defined in predicate")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"reachableBy")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Find if a given source node is reachable by a sink via a dataflow")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"sink")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List of all nodes identified as potential sensitive sinks the natured of methods, literals, types etc. associated with them")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"source")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List of all nodes identified as sensitive/attacker-controlled due to the natured of methods, literals, types etc. associated with them")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"tagList")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and return TAG nodes connected to each of the nodes")))),Object(b.b)("h3",{id:"execution-directives"},"Execution Directives"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Directive"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"toList")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and convert the result to a list")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"l")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Shorthand for ",Object(b.b)("inlineCode",{parentName:"td"},"toList"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"toJson")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and convert the result to JSON")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"toJsonPretty")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and convert the result to prettified JSON")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"p")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and pretty print the results")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"size")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Execute the traversal and return the size of the array of nodes")))),Object(b.b)("h3",{id:"help-directive"},"Help Directive"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Directive"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"help")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Print help based on the current element type")))),Object(b.b)("h3",{id:"augmentation-directives"},"Augmentation Directives"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Directive"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"newTagNode")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Tag node with a specific name")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"newTagNodePair")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Tag node with a specific name and value")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"store")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Store changes in the current DiffGraph")))))}p.isMDXComponent=!0}}]);
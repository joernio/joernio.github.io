(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,u=d["".concat(c,".").concat(m)]||d[m]||b[m]||a;return n?o.a.createElement(u,l(l({ref:t},p),{},{components:n})):o.a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var p=2;p<a;p++)c[p]=n[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return s}));var r=n(3),o=n(7),a=(n(0),n(111)),c={id:"control-flow-steps",title:"Control-Flow Steps"},l={unversionedId:"cpgql/control-flow-steps",id:"cpgql/control-flow-steps",isDocsHomePage:!1,title:"Control-Flow Steps",description:"Control-Flow Steps are Complex Steps that represent control-flow graph traversals.",source:"@site/docs/cpgql/control-flow-steps.mdx",slug:"/cpgql/control-flow-steps",permalink:"/cpgql/control-flow-steps",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/cpgql/control-flow-steps.mdx",version:"current",sidebar:"docs",previous:{title:"Complex Steps",permalink:"/cpgql/complex-steps"},next:{title:"Data-Flow Steps",permalink:"/cpgql/data-flow-steps"}},i=[{value:"controls",id:"controls",children:[]},{value:"controlledBy",id:"controlledby",children:[]},{value:"dominates",id:"dominates",children:[]},{value:"dominatedBy",id:"dominatedby",children:[]},{value:"postDominates",id:"postdominates",children:[]},{value:"postDominatedBy",id:"postdominatedby",children:[]}],p={toc:i};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Control-Flow Steps are Complex Steps that represent control-flow graph traversals."),Object(a.b)("p",null,"We will look at each one using our sample program ",Object(a.b)("inlineCode",{parentName:"p"},"X42"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  if (argc > 1 && strcmp(argv[1], "42") == 0) {\n    fprintf(stderr, "It depends!\\n");\n    exit(42);\n  }\n  printf("What is the meaning of life?\\n");\n  exit(0);\n}\n')),Object(a.b)("h3",{id:"controls"},"controls"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"controls")," is a ",Object(a.b)("em",{parentName:"p"},"Control-Flow Step")," that determines all nodes which the preceding node controls."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.code(".*argc.*strcmp.*").controls.code.l\nres0: List[String] = List(\n  "fprintf(stderr, \\"It depends!\\\\n\\")",\n  "stderr",\n  "\\"It depends!\\\\n\\"",\n  "exit(42)",\n  "42"\n)\n')),Object(a.b)("h3",{id:"controlledby"},"controlledBy"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"controlledBy")," is a ",Object(a.b)("em",{parentName:"p"},"Control-Flow Step")," that determines recursively all nodes on which the preceding node is control-dependent. "),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.codeExact("exit(42)").controlledBy.code.l\nres0: List[String] = List("argc > 1 && strcmp(argv[1], \\"42\\") == 0")\n')),Object(a.b)("h3",{id:"dominates"},"dominates"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"dominates")," is a ",Object(a.b)("em",{parentName:"p"},"Control-Flow Step")," which determines all nodes that are dominated by this node."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.code(".*argc.*strcmp.*").dominates.code.l\nres0: List[String] = List(\n  "RET",\n  "exit(0)",\n  "0",\n  "printf(\\"What is the meaning of life?\\\\n\\")",\n  "exit(42)",\n  "42",\n  "fprintf(stderr, \\"It depends!\\\\n\\")",\n  "\\"It depends!\\\\n\\"",\n  "stderr",\n  "\\"What is the meaning of life?\\\\n\\""\n)\n')),Object(a.b)("h3",{id:"dominatedby"},"dominatedBy"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"dominatedBy"),"  is a ",Object(a.b)("em",{parentName:"p"},"Control-Flow Step")," which determines all nodes by which the node is dominated."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.codeExact("exit(42)").dominatedBy.code.l\nres0: List[String] = List(\n  "main (int argc,char *argv[])",\n  "argc",\n  "1",\n  "argc > 1",\n  "argc > 1 && strcmp(argv[1], \\"42\\") == 0",\n  "stderr",\n  "\\"It depends!\\\\n\\"",\n  "fprintf(stderr, \\"It depends!\\\\n\\")",\n  "42"\n)\n')),Object(a.b)("h3",{id:"postdominates"},"postDominates"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"postDominates"),"  is a ",Object(a.b)("em",{parentName:"p"},"Control-Flow Step")," that determines all nodes that are post-dominated by this node."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.code(".*argc.*strcmp.*").postDominates.code.l\nres0: List[String] = List(\n  "argv",\n  "1",\n  "argv[1]",\n  "\\"42\\"",\n  "strcmp(argv[1], \\"42\\")",\n  "0",\n  "main (int argc,char *argv[])",\n  "argc",\n  "1",\n  "argc > 1",\n  "strcmp(argv[1], \\"42\\") == 0"\n)\n')),Object(a.b)("h3",{id:"postdominatedby"},"postDominatedBy"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"postDominatedBy"),"  is a ",Object(a.b)("em",{parentName:"p"},"Control-Flow Step")," that determines all nodes by which the node is post dominated."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.codeExact("exit(42)").postDominatedBy.code.l\nres0: List[String] = List(\n  "RET",\n  "exit(0)",\n  "0",\n  "printf(\\"What is the meaning of life?\\\\n\\")",\n  "\\"What is the meaning of life?\\\\n\\""\n)\n')))}s.isMDXComponent=!0}}]);
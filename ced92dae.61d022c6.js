(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var i=n(0),l=n.n(i);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},c=Object.keys(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(i=0;i<c.length;i++)n=c[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var b=l.a.createContext({}),d=function(e){var t=l.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return l.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},s=l.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,r=e.parentName,b=a(e,["components","mdxType","originalType","parentName"]),p=d(n),s=i,u=p["".concat(r,".").concat(s)]||p[s]||m[s]||c;return n?l.a.createElement(u,o(o({ref:t},b),{},{components:n})):l.a.createElement(u,o({ref:t},b))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,r=new Array(c);r[0]=s;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var b=2;b<c;b++)r[b]=n[b];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return a})),n.d(t,"default",(function(){return d}));var i=n(3),l=n(7),c=(n(0),n(107)),r={id:"getting-bitcode",title:"Getting LLVM Bitcode"},o={unversionedId:"llvm2cpg/getting-bitcode",id:"llvm2cpg/getting-bitcode",isDocsHomePage:!1,title:"Getting LLVM Bitcode",description:"LLVM Bitcode may take one of the following forms:",source:"@site/docs/llvm2cpg/getting-bitcode.md",slug:"/llvm2cpg/getting-bitcode",permalink:"/llvm2cpg/getting-bitcode",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/llvm2cpg/getting-bitcode.md",version:"current",sidebar:"docs",previous:{title:"Hello, LLVM World",permalink:"/llvm2cpg/hello-llvm"},next:{title:"Reference Card",permalink:"/cpgql/reference-card"}},a=[{value:"&#39;Hello-world&#39; version",id:"hello-world-version",children:[]},{value:"Real-world version",id:"real-world-version",children:[]},{value:"Known issues",id:"known-issues",children:[]},{value:"Getting CPG out of a project",id:"getting-cpg-out-of-a-project",children:[]}],b={toc:a};function d(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"LLVM Bitcode may take one of the following forms:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"LLVM IR (human-readable representation)"),Object(c.b)("li",{parentName:"ul"},"LLVM Bitcode (bitstream representation)"),Object(c.b)("li",{parentName:"ul"},"Embedded Bitcode (bitstream representation embedded into a binary)")),Object(c.b)("p",null,"There are several ways to get LLVM Bitcode out of high-level source code.\nThis section describes these approaches, covering both basic mechanics and the real-world use cases.\nIt concludes with a list of known issues."),Object(c.b)("h3",{id:"hello-world-version"},"'Hello-world' version"),Object(c.b)("p",null,"Let's use the following program as an example:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),'/// main.c\nextern int printf(const char *, ...);\nvoid callee(int x) {\n  printf("%d\\n", x);\n}\nint main(int argc, char **argv) {\n    callee(14);\n    callee(42);\n    return 0;\n}\n')),Object(c.b)("h4",{id:"llvm-ir"},"LLVM IR"),Object(c.b)("p",null,"To emit LLVM IR for the single file, one can use the following command:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"clang -c -S -emit-llvm main.c -o main.ll\n")),Object(c.b)("p",null,"Emitted ",Object(c.b)("inlineCode",{parentName:"p"},"main.ll")," can be passed to the ",Object(c.b)("inlineCode",{parentName:"p"},"llvm2cpg"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"llvm2cpg main.ll\n")),Object(c.b)("h4",{id:"llvm-bitcode"},"LLVM Bitcode"),Object(c.b)("p",null,"There are two ways to get the bitstream representation."),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"clang -c -emit-llvm main.c -o main.bc\n")),Object(c.b)("p",null,"Or via LTO trick:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"clang -c -flto main.c -o main.o\n")),Object(c.b)("p",null,"In these cases, both ",Object(c.b)("inlineCode",{parentName:"p"},"main.o")," and ",Object(c.b)("inlineCode",{parentName:"p"},"main.bc")," contain LLVM Bitcode:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"> file main.o main.bc\nmain.o:  LLVM bitcode, wrapper x86_64\nmain.bc: LLVM bitcode, wrapper x86_64\n")),Object(c.b)("p",null,"Either of them can be passed to ",Object(c.b)("inlineCode",{parentName:"p"},"llvm2cpg"),"."),Object(c.b)("h4",{id:"embedded-bitcode"},"Embedded Bitcode"),Object(c.b)("p",null,"This is the ideal case since it gives the most straightforward integration and can be easily added to an existing build system without affecting the resulting software."),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"> clang -fembed-bitcode main.c -o main\n> ./main\n14\n42\n")),Object(c.b)("p",null,"The resulting ",Object(c.b)("inlineCode",{parentName:"p"},"main")," can be passed to ",Object(c.b)("inlineCode",{parentName:"p"},"llvm2cpg")," as is:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"> llvm2cpg main\n[2019-11-06 10:00:59.021] [llvm2cpg] [info] Loading main\n[2019-11-06 10:00:59.027] [llvm2cpg] [info] Emitting CPG 1/1\n[2019-11-06 10:00:59.028] [llvm2cpg] [info] Serializing CPG\n[2019-11-06 10:00:59.028] [llvm2cpg] [info] Saving CPG on disk\n[2019-11-06 10:00:59.029] [llvm2cpg] [info] CPG is successfully saved on disk: ./cpg.bin.zip\n[2019-11-06 10:00:59.029] [llvm2cpg] [info] Shutting down\n")),Object(c.b)("h3",{id:"real-world-version"},"Real-world version"),Object(c.b)("p",null,"Getting Bitcode for the real-world projects with all the different build systems is less straightforward, but still doable. One need to inject one of the following flags into the build system:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"-emit-llvm")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"-flto")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"-fembed-bitcode"))),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Note: Alternatively, one can use ",Object(c.b)("a",Object(i.a)({parentName:"em"},{href:"https://github.com/travitch/whole-program-llvm"}),"whole-program-llvm"),".")),Object(c.b)("p",null,"In the case of ",Object(c.b)("inlineCode",{parentName:"p"},"-emit-llvm"),", the build doesn't finish properly (linking fails since there are no object files produced), but all the bitcode files will be available.\nIn the case of ",Object(c.b)("inlineCode",{parentName:"p"},"-flto"),", the build succeeds, and all the intermediate object files, in fact, will contain bitcode.\nIn the case of ",Object(c.b)("inlineCode",{parentName:"p"},"-fembed-bitcode"),", the build succeeds, and the resulting binary contains required bitcode."),Object(c.b)("h4",{id:"cmake"},"CMake"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"cmake -DCMAKE_C_FLAGS=-fembed-bitcode -DCMAKE_CXX_FLAGS=-fembed-bitcode source-root\n")),Object(c.b)("h4",{id:"xcode"},"Xcode"),Object(c.b)("p",null,"Add a flag to both ",Object(c.b)("inlineCode",{parentName:"p"},"Other C Flags")," and ",Object(c.b)("inlineCode",{parentName:"p"},"Other Linker Flags"),"."),Object(c.b)("h4",{id:"xcodebuild"},"xcodebuild"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"xcodebuild OTHER_CFLAGS=-fembed-bitcode OTHER_CPLUSPLUSFLAGS=-fembed-bitcode OTHER_LDFLAGS=-fembed-bitcode\n")),Object(c.b)("h4",{id:"other-build-systems"},"Other build systems"),Object(c.b)("p",null,"Consider looking into ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/travitch/whole-program-llvm"}),"whole-program-llvm"),"."),Object(c.b)("h3",{id:"known-issues"},"Known issues"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"-fembed-bitcode")," may not work on macOS if a project links a static library that was not compiled with embedded bitcode support"),Object(c.b)("li",{parentName:"ul"},"if ",Object(c.b)("inlineCode",{parentName:"li"},"-fembed-bitcode")," is combined with ",Object(c.b)("inlineCode",{parentName:"li"},"-flto"),", then bitcode won't be embedded into a binary"),Object(c.b)("li",{parentName:"ul"},"in some cases, ",Object(c.b)("inlineCode",{parentName:"li"},"llvm2cpg")," cannot read debug information emitted by Xcode's clang. In this case, everything still works, but the debug info is not taken into account.")),Object(c.b)("h3",{id:"getting-cpg-out-of-a-project"},"Getting CPG out of a project"),Object(c.b)("p",null,"Once you get the bitcode, the CPG emission is trivial. Here are typical commands you may want to run depending on the way you get bitcode."),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"-emit-llvm"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),'cd build-directory\nllvm2cpg `find ./ -name "*.bc"`\n# or\nllvm2cpg `find ./ -name "*.ll"`\n')),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"-flto"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),'cd build-directory\nllvm2cpg `find ./ -name "*.o"`\n')),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"-fembed-bitcode"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"cd build-directory\nllvm2cpg program-binary\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"whole-program-llvm"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{}),"cd build-directory\nllvm2cpg bitcode.bc\n")))}d.isMDXComponent=!0}}]);
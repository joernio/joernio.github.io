(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),s=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=s(n),b=r,f=d["".concat(i,".").concat(b)]||d[b]||u[b]||o;return n?a.a.createElement(f,c(c({ref:t},l),{},{components:n})):a.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),o=(n(0),n(103)),i={id:"core-steps",title:"Core Steps"},c={unversionedId:"cpgql/core-steps",id:"cpgql/core-steps",isDocsHomePage:!1,title:"Core Steps",description:"Core Steps are CPGQL Steps which can be combined with any other Step.",source:"@site/docs/cpgql/core-steps.mdx",slug:"/cpgql/core-steps",permalink:"/cpgql/core-steps",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/cpgql/core-steps.mdx",version:"current",sidebar:"docs",previous:{title:"Filter Steps",permalink:"/cpgql/filter-steps"},next:{title:"Repeat Steps",permalink:"/cpgql/repeat-steps"}},p=[{value:"map",id:"map",children:[]},{value:"sideEffect",id:"sideeffect",children:[]},{value:"dedup",id:"dedup",children:[]}],l={toc:p};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Core Steps are CPGQL Steps which can be combined with any other Step.\nJoern offers four ",Object(o.b)("em",{parentName:"p"},"Core Steps"),", ",Object(o.b)("inlineCode",{parentName:"p"},"map"),", ",Object(o.b)("inlineCode",{parentName:"p"},"sideEffect"),", ",Object(o.b)("inlineCode",{parentName:"p"},"dedup")," and ",Object(o.b)("inlineCode",{parentName:"p"},"clone"),"."),Object(o.b)("p",null,"We will look at each one while analyzing a simple program named ",Object(o.b)("inlineCode",{parentName:"p"},"X42"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-c"}),'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  if (argc > 1 && strcmp(argv[1], "42") == 0) {\n    fprintf(stderr, "It depends!\\n");\n    exit(42);\n  }\n  printf("What is the meaning of life?\\n");\n  exit(0);\n}\n')),Object(o.b)("h3",{id:"map"},"map"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"map")," ",Object(o.b)("em",{parentName:"p"},"Core Step")," is a Step which transforms objects in a traversal with an expression. Its expression takes one argument, a variable representing the item the ",Object(o.b)("inlineCode",{parentName:"p"},"map")," ",Object(o.b)("em",{parentName:"p"},"Core Step")," is suffixing, and can return any other type.\nFor example, say that you'd like to return the value of the CODE property, together with the value of the TYPE_FULL_NAME property of all LITERAL nodes in ",Object(o.b)("inlineCode",{parentName:"p"},"X42"),"'s Code Property Graph:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.literal.map(node => List(node.typeFullName, node.code)).toList\nres223: List[List[String]] = List(\n  List("char *", "\\"What is the meaning of life?\\\\n\\""),\n  List("int", "42"),\n  List("int", "0"),\n  List("char *", "\\"It depends!\\\\n\\""),\n  List("int", "0"),\n  List("char *", "\\"42\\""),\n  List("int", "1"),\n  List("int", "1")\n)\n')),Object(o.b)("h3",{id:"sideeffect"},"sideEffect"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"sideEffect")," is a step that executes a function on each node of the traversal it suffixes."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.literal.sideEffect(node => println("Called once for ID " + node.id.toString())).code.l \nCalled once for ID 32\nCalled once for ID 30\nCalled once for ID 34\nCalled once for ID 28\nCalled once for ID 24\nCalled once for ID 23\nCalled once for ID 22\nCalled once for ID 17\nres0: List[String] = List(\n  "\\"What is the meaning of life?\\\\n\\"",\n  "42",\n  "0",\n  "\\"It depends!\\\\n\\"",\n  "0",\n  "\\"42\\"",\n  "1",\n  "1"\n)\n')),Object(o.b)("h3",{id:"dedup"},"dedup"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"dedup")," is a step that removes duplicates from the traversal it suffixes."),Object(o.b)("p",null,"For example, say you'd like to query ",Object(o.b)("inlineCode",{parentName:"p"},"X42"),"'s Code Property Graph for the AST parent nodes of all CALL nodes, and print out their CODE property:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.astParent.isCall.code.l \nres0: List[String] = List(\n  "strcmp(argv[1], \\"42\\")",\n  "strcmp(argv[1], \\"42\\") == 0",\n  "argc > 1 && strcmp(argv[1], \\"42\\") == 0",\n  "argc > 1 && strcmp(argv[1], \\"42\\") == 0"\n)\n')),Object(o.b)("p",null,"Because of the structure of the resulting AST, the query returns a duplicate result. To remove it, add ",Object(o.b)("inlineCode",{parentName:"p"},"dedup")," to the query:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.call.astParent.isCall.dedup.code.l \nres0: List[String] = List(\n  "strcmp(argv[1], \\"42\\")",\n  "strcmp(argv[1], \\"42\\") == 0",\n  "argc > 1 && strcmp(argv[1], \\"42\\") == 0"\n)\n')))}s.isMDXComponent=!0}}]);
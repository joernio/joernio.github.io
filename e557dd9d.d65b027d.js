(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),m=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=m(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,f=d["".concat(o,".").concat(u)]||d[u]||s[u]||i;return n?a.a.createElement(f,p(p({ref:t},c),{},{components:n})):a.a.createElement(f,p({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return m}));var r=n(3),a=n(7),i=(n(0),n(103)),o={id:"repeat-steps",title:"Repeat Steps"},p={unversionedId:"cpgql/repeat-steps",id:"cpgql/repeat-steps",isDocsHomePage:!1,title:"Repeat Steps",description:"Repeat Steps are CPGQL Steps which repeat another traversal multiple times.",source:"@site/docs/cpgql/repeat-steps.mdx",slug:"/cpgql/repeat-steps",permalink:"/cpgql/repeat-steps",editUrl:"https://github.com/joernio/website/edit/master/docs.joern.io/docs/cpgql/repeat-steps.mdx",version:"current",sidebar:"docs",previous:{title:"Core Steps",permalink:"/cpgql/core-steps"},next:{title:"Complex Steps",permalink:"/cpgql/complex-steps"}},l=[{value:"repeat..times",id:"repeattimes",children:[]},{value:"repeat..until",id:"repeatuntil",children:[]},{value:"repeat..emit..times",id:"repeatemittimes",children:[]},{value:"repeat..emit..until",id:"repeatemituntil",children:[]}],c={toc:l};function m(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Repeat Steps are CPGQL Steps which repeat another traversal multiple times."),Object(i.b)("h3",{id:"repeattimes"},"repeat..times"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.method.name("main").repeat(_.astChildren)(_.times(4)).l\nres123: List[AstNode] = List(\n  Call(\n    id -> 13L,\n    code -> "argc > 1",\n    name -> "<operator>.greaterThan",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 16L,\n    code -> "strcmp(argv[1], \\"42\\") == 0",\n    name -> "<operator>.equals",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 24L,\n    code -> "fprintf(stderr, \\"It depends!\\\\n\\")",\n    name -> "fprintf",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 27L,\n    code -> "exit(42)",\n    name -> "exit",\n// ...output trimmed for brevity\n  )\n)\n')),Object(i.b)("h3",{id:"repeatuntil"},"repeat..until"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.method.name("main").repeat(_.astChildren)(_.until(_.isCall)).l\nres124: List[AstNode] = List(\n  Call(\n    id -> 29L,\n    code -> "printf(\\"What is the meaning of life?\\\\n\\")",\n    name -> "printf",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 31L,\n    code -> "exit(0)",\n    name -> "exit",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 12L,\n    code -> "argc > 1 && strcmp(argv[1], \\"42\\") == 0",\n    name -> "<operator>.logicalAnd",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 24L,\n    code -> "fprintf(stderr, \\"It depends!\\\\n\\")",\n    name -> "fprintf",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 27L,\n    code -> "exit(42)",\n    name -> "exit",\n// ...output trimmed for brevity\n  )\n)\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.method.name("main").repeat(_.astChildren)(_.until(_.isCall.name("exit"))).l \nres125: List[AstNode] = List(\n  Call(\n    id -> 31L,\n    code -> "exit(0)",\n    name -> "exit",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 27L,\n    code -> "exit(42)",\n    name -> "exit",\n// ...output trimmed for brevity\n  )\n)\n')),Object(i.b)("h3",{id:"repeatemittimes"},"repeat..emit..times"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.method.name("main").repeat(_.astChildren)(_.emit(_.isControlStructure).times(4)).l\nres130: List[AstNode] = List(\n  ControlStructure(\n    id -> 11L,\n    code -> "if (argc > 1 && strcmp(argv[1], \\"42\\") == 0)",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 13L,\n    code -> "argc > 1",\n    name -> "<operator>.greaterThan",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 16L,\n    code -> "strcmp(argv[1], \\"42\\") == 0",\n    name -> "<operator>.equals",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 24L,\n    code -> "fprintf(stderr, \\"It depends!\\\\n\\")",\n    name -> "fprintf",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 27L,\n    code -> "exit(42)",\n    name -> "exit",\n// ...output trimmed for brevity\n  )\n)\n')),Object(i.b)("h3",{id:"repeatemituntil"},"repeat..emit..until"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'joern> cpg.method.name("main").repeat(_.astChildren).until(_.isCall).l\nres124: List[AstNode] = List(\n  Call(\n    id -> 29L,\n    code -> "printf(\\"What is the meaning of life?\\\\n\\")",\n    name -> "printf",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 31L,\n    code -> "exit(0)",\n    name -> "exit",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 12L,\n    code -> "argc > 1 && strcmp(argv[1], \\"42\\") == 0",\n    name -> "<operator>.logicalAnd",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 24L,\n    code -> "fprintf(stderr, \\"It depends!\\\\n\\")",\n    name -> "fprintf",\n// ...output trimmed for brevity\n  ),\n  Call(\n    id -> 27L,\n    code -> "exit(42)",\n    name -> "exit",\n// ...output trimmed for brevity\n  )\n)\n')))}m.isMDXComponent=!0}}]);